{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","hour","setHour","minute","setMinute","meridiem","setMeridiem","timeDiff","setTimeDiff","offset","setOffset","timeTransformer","minutesDifference","absMinutesDifference","Math","abs","floor","roundUp","round","parseInt","useEffect","currentDate","Date","getHours","getMinutes","getTimezoneOffset","timezone","timezoneOffset","filter","el","className","focused","onTimeChange","options","time","theme","colorPalette","timeMode","showTimezone","closeOnOutsideClick","length","map","index","key","text","utc","colSpan","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8UAuGeA,MA5Ff,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAgCJ,mBAAS,MAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAgCN,mBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAA4BR,mBAAS,IAArC,mBAAOS,EAAP,KAAeC,EAAf,KAyBA,SAASC,EAAgBC,GACvB,IAAMC,EAAuBC,KAAKC,IAAIH,GAChCX,EAAOa,KAAKE,MAAMH,EAAuB,IACzCV,EAASU,EAAuB,GAChCI,EAAmC,EAAzBH,KAAKI,MAAMf,EAAS,GACpC,OAAIc,EAEKE,SADMlB,EAAO,IAAMgB,EACJ,IAEfhB,EAIX,OApCAmB,qBAAU,WACR,IAAMC,EAAc,IAAIC,KAKlBV,EAJoC,GAAzBS,EAAYE,WAAkBF,EAAYG,cAE5C,OAAbnB,EAAkC,IAAbJ,EAAO,IAAWE,EAAgB,GAAPF,EAAYE,GAChCkB,EAAYI,oBAGxCjB,EADEI,EAAoB,EACVO,SAAS,IAAMR,EAAgBC,GAAoB,IAEnDD,EAAgBC,MAE7B,CAACP,EAAUJ,EAAME,IAEpBiB,qBAAU,WACR,IAAMM,EAAWC,IAAeC,QAAO,SAACC,GAAD,OAAQA,EAAGpB,SAAWF,KAE3DG,EADEgB,GAGQ,MAEX,CAACnB,IAgBF,yBAAKuB,UAAU,+BACb,yBAAKA,UAAU,aACb,iDAEF,yBAAKA,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CACEC,SAAO,EACPC,aAAc,SAACC,GACb/B,EAAQiB,SAASc,EAAQhC,KAAM,KAC/BG,EAAUe,SAASc,EAAQ9B,OAAQ,KACnCG,EAAY2B,EAAQ5B,WAEtB6B,KAAMjC,EAAO,IAAME,EACnBE,SAAUA,EACV8B,MAAM,WACNC,aAAa,OACbC,SAAS,KACTC,cAAc,EACdC,qBAAqB,KAGzB,2BAAOT,UAAU,8BACf,+BACE,4BACE,yCACA,wBAAIA,UAAU,sBAAd,wBAGJ,+BACGrB,EAAO+B,OAAS,EACf/B,EAAOgC,KAAI,SAACZ,EAAIa,GAAL,OACT,wBAAIC,IAAKD,GACP,wBAAIZ,UAAU,aAAaD,EAAGe,MAC9B,wBAAId,UAAU,sBAAsBD,EAAGgB,SAI3C,4BACE,wBAAIC,QAAQ,IAAIhB,UAAU,uBAA1B,mBClFIiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5e12efd1.chunk.js","sourcesContent":["import \"./normalize.css\";\nimport \"./skeleton.css\";\nimport \"react-times/css/material/default.css\";\nimport \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\n\nimport TimePicker from \"react-times\";\nimport timezoneOffset from 'timezones.json';\n// import { timezoneOffset } from \"./timezoneOffset\";\n\n\nfunction App() {\n  const [hour, setHour] = useState(10);\n  const [minute, setMinute] = useState(45);\n  const [meridiem, setMeridiem] = useState(\"PM\");\n  const [timeDiff, setTimeDiff] = useState(0);\n  const [offset, setOffset] = useState([]);\n\n  useEffect(() => {\n    const currentDate = new Date();\n    const fromTime = currentDate.getHours() * 60 + currentDate.getMinutes();\n    const toTime =\n      meridiem === \"PM\" ? (hour + 12) * 60 + minute : hour * 60 + minute;\n    const currentTimeZoneOffset = currentDate.getTimezoneOffset();\n    const minutesDifference = (fromTime - toTime) + currentTimeZoneOffset;\n    if (minutesDifference > 0) {\n      setTimeDiff(parseInt(\"-\" + timeTransformer(minutesDifference), 10));\n    } else {\n      setTimeDiff(timeTransformer(minutesDifference));\n    }\n  }, [meridiem, hour, minute]);\n\n  useEffect(() => {\n    const timezone = timezoneOffset.filter((el) => el.offset === timeDiff);\n    if (timezone) {\n      setOffset(timezone);\n    } else {\n      setOffset([]);\n    }\n  }, [timeDiff]);\n\n  function timeTransformer(minutesDifference) {\n    const absMinutesDifference = Math.abs(minutesDifference);\n    const hour = Math.floor(absMinutesDifference / 60);\n    const minute = absMinutesDifference % 60;\n    const roundUp = Math.round(minute / 5) * 5;\n    if (roundUp) {\n      const time = hour + \".\" + roundUp;\n      return parseInt(time, 10);\n    } else {\n      return hour;\n    }\n  }\n\n  return (\n    <div className=\"container overflow-x-hidden\">\n      <div className=\"row mb-30\">\n        <h3>Time zone finder</h3>\n      </div>\n      <div className=\"row\">\n        <div className=\"four columns\">\n          <TimePicker\n            focused\n            onTimeChange={(options) => {\n              setHour(parseInt(options.hour, 10));\n              setMinute(parseInt(options.minute, 10));\n              setMeridiem(options.meridiem);\n            }}\n            time={hour + \":\" + minute}\n            meridiem={meridiem}\n            theme=\"material\"\n            colorPalette=\"dark\"\n            timeMode=\"12\"\n            showTimezone={true}\n            closeOnOutsideClick={false}\n          />\n        </div>\n        <table className=\"eight columns time-detail \">\n          <thead>\n            <tr>\n              <th>Time Zone</th>\n              <th className=\"possible-locations\">Possible Locations</th>\n            </tr>\n          </thead>\n          <tbody>\n            {offset.length > 0 ? (\n              offset.map((el, index) => (\n                <tr key={index}>\n                  <td className=\"time-zone\">{el.text}</td>\n                  <td className=\"possible-locations\">{el.utc}</td>\n                </tr>\n              ))\n            ) : (\n              <tr>\n                <td colSpan=\"2\" className=\"time-zone no-result\">No Result</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}